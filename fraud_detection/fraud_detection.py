# -*- coding: utf-8 -*-
"""Fraud detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nQkHeUQJX1AT_HM5Eq7dabdccBkoJEwk
"""

# !pip install faker

import numpy as np
import pandas as pd
from faker import Faker
from sklearn.model_selection import train_test_split
from sklearn.ensemble import IsolationForest
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

fake = Faker()
np.random.seed(42)

num_samples = 5000
data = pd.DataFrame({
    'num_verifications': np.random.normal(loc=20, scale=10, size=num_samples).astype(int).clip(1, 50),
    'num_failed_verifications': np.random.normal(loc=2, scale=2, size=num_samples).astype(int).clip(0, 10),
    'num_revocations': np.random.normal(loc=1, scale=1, size=num_samples).astype(int).clip(0, 5),
    'num_dids': np.random.choice([1, 2], size=num_samples, p=[0.8, 0.2]),  
    'key_rotations': np.random.normal(loc=1, scale=1, size=num_samples).astype(int).clip(0, 5),
})

fraud_indices = np.random.choice(data.index, size=int(0.05 * num_samples), replace=False)

data.loc[fraud_indices, 'num_failed_verifications'] = np.random.randint(6, 10, len(fraud_indices)) 
data.loc[fraud_indices, 'num_dids'] = np.random.randint(2, 4, len(fraud_indices)) 
data.loc[fraud_indices, 'key_rotations'] = np.random.randint(3, 5, len(fraud_indices)) 

data['true_fraud'] = 0
data.loc[fraud_indices, 'true_fraud'] = 1  

data = data.sample(frac=1).reset_index(drop=True)

X = data.drop(columns=['true_fraud'])
y = data['true_fraud'] 

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

model = IsolationForest(contamination=0.05, random_state=42)
model.fit(X_train)

X_test_filtered = X_test.drop(columns=['fraud_score'], errors='ignore')

X_test['fraud_score'] = model.decision_function(X_test_filtered)

X_test['is_fraud'] = model.predict(X_test_filtered)

X_test['is_fraud'] = X_test['is_fraud'].map({1: 0, -1: 1})

accuracy = accuracy_score(y_test, X_test['is_fraud'])
conf_matrix = confusion_matrix(y_test, X_test['is_fraud'])
class_report = classification_report(y_test, X_test['is_fraud'])

print("Isolation Forest Accuracy:", accuracy)
print("\nConfusion Matrix:\n", conf_matrix)
print("\nClassification Report:\n", class_report)
